-- Fix s42_logs table by creating missing log_level type

-- Create the log_level enum type if it doesn't exist
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'log_level') THEN
    CREATE TYPE log_level AS ENUM ('debug','info','warning','error');
  END IF;
END$$;

-- Drop and recreate the s42_logs table to ensure it uses the correct type
DROP TABLE IF EXISTS public.s42_logs CASCADE;

create table public.s42_logs (
  id bigint generated by default as identity primary key,
  ts timestamptz default now(),
  category text,   -- e.g., 'ui','auth','task','system','project update','task update'
  page text,
  user_id uuid references auth.users(id),
  level log_level not null,
  task_name text,
  field text,
  update_value jsonb,
  error text
);

-- Recreate the index
create index idx_s42_logs_ts on public.s42_logs(ts);

-- Grant permissions
GRANT ALL ON public.s42_logs TO service_role;
GRANT ALL ON public.s42_logs TO authenticated;

-- Enable RLS
ALTER TABLE public.s42_logs ENABLE ROW LEVEL SECURITY;

-- Add RLS policy to allow service_role to bypass RLS
CREATE POLICY "Service role can do anything with logs" ON public.s42_logs
  FOR ALL
  USING (true)
  WITH CHECK (true);

-- Add RLS policy for authenticated users to view their own logs
CREATE POLICY "Users can view their own logs" ON public.s42_logs
  FOR SELECT
  USING (auth.uid() = user_id);
